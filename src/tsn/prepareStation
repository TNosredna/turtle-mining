-- To avoid dealing with namespaces and imported scripts not
-- being able to access local variables, I've decided to inject
-- the source code when it's loaded on the filesystem.
--INJECT/turtleUtils


-- START OF LOCAL SCRIPT
local args={...};
local radius = args[1] or nil;
local height = args[2] or nil;
currentLogIndent = args[3];

local function prepareStation(radius, height)
    local radius = radius;
    local height = height;

    log (fine, "Entering prepareStation(radius="..radius..", height="..height..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;

    for i = 1, 4 do
        for i = 1,(radius - 2) do
            moveWithDig(forward);
            placeItem(down, TRANSPORT_PIPE_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        end;

        moveWithDig(forward);
        moveWithDig(down);
        placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(right);
        moveWithDig(forward);
        turn(left);
        moveWithDig(forward, 1);
        placeItem(down, WALL_FILLER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION)
        dig(forward);
        moveWithDig(back, 1);
        placeItem(forward, REDSTONE_TORCH_SLOT, NO_OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(left);
        placeItem(forward, CONNECTOR_PIPE_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        moveWithDig(up);
        placeItem(down, ENGINE_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(right);
        placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(left);
        moveWithDig(forward, 2);
        turn(right);
        placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        moveWithDig(up);
        turn(left);
        moveWithDig(forward);
        turn(right);
        placeItem(forward, WALL_FILLER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        move(back);
        placeItem(forward, TORCH_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);

        move(back, (radius - 2));
        turn(right);
        moveWithDig(forward, 2);
        moveWithDig(down);
    end;
    placeItem(down, ONE_WAY_PIPE_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    moveWithDig(up, height - 1);
    for i = 1,(height - 1) do
        move(down);
        placeItem(up, TRANSPORT_PIPE_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    end;
    move(back);
    placeItem(forward, TRANSPORT_PIPE_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);

    turn(right);
    moveWithDig(forward);
    moveWithDig(up, height - 1);
    for i = 1,(height - 1) do
        placeItem(forward, WALL_FILLER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        moveWithDig(down);
        placeItem(up, LADDER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    end;
    placeItem(forward, WALL_FILLER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    move(back);
    placeItem(forward, LADDER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting prepareStation()", currentLogIndent);
end;

local function moveToStartingPosition(radius, height)
    local radius = radius;
    local height = height;
    log (fine, "Entering moveToStartingPosition(radius="..radius..", height="..height..")");
    currentLogIndent = currentLogIndent + 1;

    move(back, (radius - 1));
    turn(right);
    moveWithDig(forward, (radius - 1));
    turn(left);
    moveWithDig(down, (height - 3));
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting moveToStartingPosition()", currentLogIndent);
end

if ((radius == nil) or (height == nil)) then
    fs.delete(logFileName);
    print ("What is the desired radius of the station? (4 is normal)");
    radius = io.read();
    radius = tonumber(radius);

    print ("What is the desired height, including floor and ceiling layers, of the station? (4 is normal)");
    height = io.read();
    height = tonumber(height);
end;

log (fine, "Entering PREPARE_STATION(radius="..radius..", height="..height..")");
currentLogIndent = currentLogIndent + 1;

moveToStartingPosition(radius, height);
prepareStation(radius, height);

currentLogIndent = currentLogIndent - 1;
log (fine, "Exiting PREPARE_STATION()");