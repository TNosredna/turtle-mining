-- To avoid dealing with namespaces and imported scripts not
-- being able to access local variables, I've decided to inject
-- the source code when it's loaded on the filesystem.
--INJECT/turtleUtils


-- START OF LOCAL SCRIPT
local args={...};
local radius = args[1] or nil;
local height = args[2] or nil;

--WALL_FILLER_SLOT = 1;     -- 64 stack Cobblestone
--EXTRA_SLOT = 2;           -- 64 stack Cobblestone
--REDWIRE_SLOT = 3;         -- 64 stack Redstone Wire (ONLY FOR SHAFT)
--ONE_WAY_PIPE_SLOT = 4;    -- 1 stack Iron Transport Pipe
--WALL_FILLER_SLOT = 5;     -- 64 stack Glass (id=20)
--FLOOR_FILLER_SLOT = 6;    -- 64 stack Glass (id=20)
--ROOF_FILLER_SLOT = 7;     -- 64 stack Glass (id=20)
--LADDER_SLOT = 8;          -- 64 stack Wood Ladder
--TORCH_SLOT = 9;           -- 64 stack Torch
--TRANSPORT_PIPE_SLOT = 10; -- 64 stack Stone Transport Pipe (MAY NOT BE ENOUGH)
--CONNECTOR_PIPE_SLOT = 11; -- 5 stack Wood Transport Pipe
--DOOR_SLOT = 12;           -- 4 stack Wood Door
--CHEST_SLOT = 13;          -- 14 stack Chest
--REDSTONE_TORCH_SLOT = 14; -- 5 stack Redstone Torch
--ENGINE_SLOT = 15;         -- 5 stack Redstone Engine
--BUCKET_SLOT = 16;         -- 1 stack Water Bucket

local WALL_FILLER_SLOT = 1;     -- 4 stack Cobblestone
local ONE_WAY_PIPE_SLOT = 4;    -- 1 stack Iron Transport Pipe
local LADDER_SLOT = 8;          -- 64 stack Wood Ladder
local TORCH_SLOT = 9;           -- 4 stack Torch
local TRANSPORT_PIPE_SLOT = 10; -- 11 stack Stone Transport Pipe
local CONNECTOR_PIPE_SLOT = 11; -- 4 stack Wood Transport Pipe
local CHEST_SLOT = 13;          -- 12 stack Chest
local REDSTONE_TORCH_SLOT = 14; -- 4 stack Redstone Torch
local ENGINE_SLOT = 15;         -- 4 stack Redstone Engine

local function prepareStation()
    for i = 1,(radius - 2) do
        move(forward);
        placeItem(down, TRANSPORT_PIPE_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    end;

    for i = 1, 4 do
        move(forward);
        moveWithDig(down);
        placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(right);
        move(forward);
        turn(left);
        placeItem(forward, REDSTONE_TORCH_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(left);
        placeItem(forward, CONNECTOR_PIPE_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        move(up);
        placeItem(down, ENGINE_SLOT, NO_OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(right);
        placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        turn(left);
        move(forward, 2);
        turn(right);
        placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        move(up);
        turn(left);
        move(forward);
        turn(right);
        placeItem(forward, WALL_FILLER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        move(back);
        placeItem(forward, TORCH_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);

        move(back, 2);
        turn(right);
        move(forward, 2);
        move(down);
    end;
    placeItem(down, ONE_WAY_PIPE_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    for i = 1,(height - 3) do
        move(up);
        placeItem(down, TRANSPORT_PIPE_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    end;
    placeItem(up, TRANSPORT_PIPE_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    move(back);
    placeItem(forward, TRANSPORT_PIPE_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);

    turn(right);
    move(forward);
    moveWithDig(up);
    for i = 1,(height - 2) do
        placeItem(forward, WALL_FILLER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
        move(down);
        placeItem(up, LADDER_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    end;
    placeItem(forward, WALL_FILLER_SLOT, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    move(back);
    placeItem(forward, LADDER_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
end;

local function moveToStartingPosition(radius)
    local radius = radius;
    log (fine, "Entering moveToStartingPosition("..radius..")");
    currentLogIndent = currentLogIndent + 1;
    move(back, radius - 1);
    turn(right);
    move(radius - 1);
    turn(left);
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting moveToStartingPositionForWalls()");
end

if ((radius == nil) or (height == nil)) then
    fs.delete(logFileName);
    print ("What is the desired radius of the station? (4 is normal)");
    radius = io.read();
    radius = tonumber(radius);

    print ("What is the desired height, including floor and ceiling layers, of the station? (4 is normal)");
    height = io.read();
    height = tonumber(height);
end;

local diameterWithWalls = (radius * 2) + 1;
local diameterWithoutWalls = (radius * 2) - 1;

prepareStation();
