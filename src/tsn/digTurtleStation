wallFiller1Pos = 1;
wallFiller2Pos = 2;
wallFiller3Pos = 3;
floorFillerPos = 4;
roofFillerPos = 5;
skylightFillerPos = 6;

function select(slot)
    turtle.select(slot)
    if turtle.getItemCount(slot) == 1 then
        turtle.select(1)
        while not turtle.compareTo(slot) do
            for i = 1, 12 do
                turtle.select(i)
            end
        end
    end
end

function move(direction, steps, attempts)
    steps = steps or 1
    attempts = attempts or 10
    for i = 1, steps do
        local tries = 1
        while (((attempts == 0) or (tries <= attempts))) do
            if direction == "up" then
                if turtle.up() then
                    break;
                else
                    turtle.digUp()
                end
            end
            if direction == "down" then
                if turtle.down() then
                    break;
                else
                    turtle.digDown()
                end
            end
            if direction == "forward" then
                if turtle.forward() then
                    break;
                else
                    turtle.dig()
                end
            end
            -- THIS CONSTRUCTION IS USED SO TRIES WON'T OVERFLOW WHEN ATTEMPTS==0
            tries = math.min(tries + 1, attempts + 1)
            sleep(0)
        end
    end
end

function place(direction, slot)
    local needToMoveBack = false;
    select(slot);
    if direction == "up" then
        if not turtle.placeUp() then
            repeat
                turtle.digUp();
                until turtle.up()
            needToMoveBack = true;
            place(direction, slot);
        end
        if needToMoveBack then turtle.down() end
        return turtle.placeUp();
    end
    if direction == "down" then
        if not turtle.placeDown() then
            repeat
                turtle.digDown();
                until turtle.down()
            needToMoveBack = true;
            place(direction, slot);
        end
        if needToMoveBack then turtle.up() end
        return turtle.placeDown();
    end
    if direction == "forward" then
        if not turtle.place() then
            repeat
                turtle.dig();
                until turtle.forward()
            needToMoveBack = true;
            place(direction, slot);
        end
        if needToMoveBack then turtle.back() end
        return turtle.place();
    end
end

-- move from starting position to corner of room where the room anchor will be built
move("down", 6);
turtle.turnLeft();
move("forward", 5);
turtle.turnRight();
move("forward", 4);
move("up", 4);

function upwardsAnchor()
end

function downwardsAnchor()
end

function upwardsDoubleLine()
end

function downwardsDoubleLine()
end




