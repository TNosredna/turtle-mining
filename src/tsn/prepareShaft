-- To avoid dealing with namespaces and imported scripts not
-- being able to access local variables, I've decided to inject
-- the source code when it's loaded on the filesystem.
--INJECT/turtleUtils


-- START OF LOCAL SCRIPT
local args={...};
local height = args[1];
local overflow = true;

-- start in upper-left quadrant
function prepareTopOfShaft()
    log (fine, "Entering prepareTopOfShaft()");
    currentLogIndent = currentLogIndent + 1;

    placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    move(back);
    placeItem(forward, CHEST_SLOT, NO_OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    move(down);
    turn(right);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting prepareTopOfShaft()");
end;

function prepareShaftLayer()
    log (fine, "Entering prepareShaftLayer()");
    currentLogIndent = currentLogIndent + 1;

    turn(left);
    move(forward);
    turn(left);
    move(back);

    placeItem(forward, TRANSPORT_PIPE_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    turn(right);
    move(back);
--    placeItem(forward, REDWIRE_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    turn(right);
    move(back);
    placeItem(forward, LADDER_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    move(down);
    placeLight(TORCH_SLOT);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting prepareShaftLayer()");
end;

function prepareBottomOfShaft()
    log (fine, "Entering prepareBottomOfShaft()");
    currentLogIndent = currentLogIndent + 1;

    turn(left);
    move(forward);
    turn(left);
    move(back);

    placeItem(forward, TRANSPORT_PIPE_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);    --    placeItem(forward, CHEST_SLOT, NO_OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    turn(right);
    move(back);
--    placeItem(forward, REDSTONE_TORCH_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    turn(right);
    move(back);
    placeItem(forward, LADDER_SLOT, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    move(down);
    placeLight(TORCH_SLOT);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting prepareBottomOfShaft()");
end;

function prepareShaft(height)
    log (fine, "Entering prepareShaft("..height..")");
    currentLogIndent = currentLogIndent + 1;

    local height = height; -- stop one from the bottom and give it space for the bottom of shaft
    prepareTopOfShaft();
    for i=1,(height) do
        prepareShaftLayer();
    end;
--    prepareBottomOfShaft();

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting prepareShaft()");
end;

if (height == nil or height=="") then
    fs.delete(logFileName);
    print ("What is the height of the shaft? (X - 13 is normal)");
    height = io.read();
    height = tonumber(height);
end;
prepareShaft(height);