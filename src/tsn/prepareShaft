-- To avoid dealing with namespaces and imported scripts not
-- being able to access local variables, I've decided to inject
-- the source code when it's loaded on the filesystem.
--INJECT/turtleUtils


-- START OF LOCAL SCRIPT
--WALL_FILLER_SLOT = 1;     -- 64 stack Cobblestone
--EXTRA_SLOT = 2;           -- 64 stack Cobblestone
--REDWIRE_SLOT = 3;         -- 64 stack Redstone Wire (ONLY FOR SHAFT)
--ONE_WAY_PIPE_SLOT = 4;    -- 1 stack Iron Transport Pipe
--WALL_FILLER_SLOT = 5;     -- 64 stack Glass (id=20)
--FLOOR_FILLER_SLOT = 6;    -- 64 stack Glass (id=20)
--ROOF_FILLER_SLOT = 7;     -- 64 stack Glass (id=20)
--LADDER_SLOT = 8;          -- 64 stack Wood Ladder
--TORCH_SLOT = 9;           -- 64 stack Torch
--TRANSPORT_PIPE_SLOT = 10; -- 64 stack Stone Transport Pipe (MAY NOT BE ENOUGH)
--CONNECTOR_PIPE_SLOT = 11; -- 5 stack Wood Transport Pipe
--DOOR_SLOT = 12;           -- 4 stack Wood Door
--CHEST_SLOT = 13;          -- 14 stack Chest
--REDSTONE_TORCH_SLOT = 14; -- 5 stack Redstone Torch
--ENGINE_SLOT = 15;         -- 5 stack Redstone Engine
--BUCKET_SLOT = 16;         -- 1 stack Water Bucket

local REDWIRE_SLOT = 3;           -- 64 stack Redstone Wire
local LADDER_SLOT = 8;            -- 64 stack Wood Ladder
local TORCH_SLOT = 9;             -- 10 stack Torch
local TRANSPORT_PIPE_SLOT = 10;    -- 64 stack Stone Transport Pipe
local CONNECTOR_PIPE_SLOT = 11;   -- 1 stack Wood Pipe
local CHEST_SLOT = 13;            -- 2 stack Wood Chest
local REDSTONE_TORCH_SLOT = 14;   -- 1 stack Redstone Torch
local ENGINE_SLOT = 15;           -- 1 stack Redstone Engine

local args={...};
local height = args[1];
local overflow = true;

-- start while turtle facing East to place Engine
function prepareTopOfShaft()
    placeItem(forward, CHEST_SLOT);
    move(back);
    placeItem(forward, CONNECTOR_PIPE_SLOT);
    turn(right);
    move(forward);
    turn(left);
    placeItem(forward, ENGINE_SLOT);

    move(down);
    turn(left);
    move(forward);
    turn(right);
    move(forward);
    dig(forward);
    placeItem(forward, TRANSPORT_PIPE_SLOT, overflow);
    move(back);
    turn(right);
end;

function prepareShaftLayer()
    turn(left);
    move(forward);
    turn(left);
    move(back);

    placeItem(forward, TRANSPORT_PIPE_SLOT, overflow);
    turn(right);
    move(back);
    placeItem(forward, REDWIRE_SLOT);
    turn(right);
    move(back);
    placeItem(forward, LADDER_SLOT, overflow);
    move(down);
    placeLight(TORCH_SLOT);
end;

function prepareBottomOfShaft()
    turn(left);
    move(forward);
    turn(left);
    move(back);

    placeItem(forward, CHEST_SLOT);
    turn(right);
    move(back);
    placeItem(forward, REDSTONE_TORCH_SLOT);
    turn(right);
    move(back);
    placeItem(forward, LADDER_SLOT, overflow);
    move(down);
    placeLight(TORCH_SLOT);
end;

function prepareShaft(height)
    local height = height - 1; -- stop one from the bottom and give it space for the bottom of shaft
    prepareTopOfShaft();
    for i=1,(height) do
        prepareShaftLayer();
    end;
    prepareBottomOfShaft();
end;

if (height == nil or height=="") then
    fs.delete(logFileName);
    print ("What is the height of the shaft? (X - 13 is normal)");
    height = io.read();
    height = tonumber(height);
end;
prepareShaft(height);