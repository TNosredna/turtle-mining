up = "up";
down = "down";
forward = "forward";
right = "right";
left = "left";
back = "back";
southFacing = 0;
westFacing = 90;
northFacing = 180;
eastFacing = 270;
rightFacing = 90;
leftFacing = -90;
forwardMoving = 1;
backwardsMoving = -1;
upMoving = 1;
downMoving = -1;
noMoving = 0;

OVERFLOW = true;
NO_OVERFLOW = false;
COMPARE = true;
NO_COMPARE = false;
DETECT = true;
NO_DETECT = false;
ANCHOR_PROTECTION = true;
NO_ANCHOR_PROTECTION = false;
SUCCESS = true;
FAILURE = false;

blockAlreadyPresent = 1;
notEnoughInventory = 2;

error = 0;
coarse = 1;
fine = 2;
debug = 3;
fineDebug = 4;

currentSlotNum = 1;

logFileName = os.getComputerLabel()..".log";
xzyFileName = os.getComputerLabel().."-xzy.txt";

currentLogLevel = debug;
currentLogIndent = 0;

currentX = 0;
currentZ = 0;
currentY = 0;
currentFacing = 0;

lightThreshold = 6;
lastLightX = 0;
lastLightZ = 0;
lastLightY = 0;

--WALL_FILLER_SLOT=1    -- 64 stack Cobblestone (id=4) [EXTRA]
--TRANSPORT_PIPE_SLOT=2 -- 64 stack Stone Transport Pipe (id=4308) [EXTRA]
--LADDER_SLOT=3         -- 64 stack Wood Ladder (id=65)  [EXTRA]
WALL_FILLER_SLOT=4;      -- 64 stack Cobblestone (id=4)
TRANSPORT_PIPE_SLOT=5;   -- 64 stack Stone Transport Pipe (id=4308)
LADDER_SLOT=6;           -- 64 stack Wood Ladder (id=65)
ONE_WAY_PIPE_SLOT=7;     -- 1 stack Iron Transport Pipe (id=4309)
WALL_FILLER_SLOT=8;      -- 64 stack Glass (id=20)
FLOOR_FILLER_SLOT=9;     -- 64 stack Glass (id=20)
ROOF_FILLER_SLOT=10;     -- 64 stack Glass (id=20)
TORCH_SLOT=11;           -- 64 stack Torch (id=50)
CONNECTOR_PIPE_SLOT=12;  -- 4 stack Wood Transport Pipe (id=4306)
CHEST_SLOT=13;           -- 13 stack Chest (id=54)
REDSTONE_TORCH_SLOT=14;  -- 4 stack Redstone Torch (id=76)
ENGINE_SLOT=15;          -- 4 stack Redstone Engine (id=506)
BUCKET_SLOT=16;          -- 1 stack Water Bucket (id=326)

FUEL_SLOT = 16;

function log(logLevel, line, currentLogIndent)
    local currentLogIndent = currentLogIndent or 0;
    local logLevel = logLevel or coarse;
    if (logLevel <= currentLogLevel) then
        local entry;
        for i=1,currentLogIndent do
            entry = entry.."  ";
        end;
        entry = entry..line;
        entry = entry.."\t\t - "..string.format("%.2f", os.clock());
        local filename = logFileName;
        local file = fs.open(filename, "a"); -- "w" opens the file, erasing all existing contents
        file.writeLine(entry);
        file.close();
    end;
end;

function writeXZY()
    local file = fs.open(xzyFileName, "w"); -- "w" opens the file, erasing all existing contents
    file.writeLine(currentX);
    file.writeLine(currentZ);
    file.writeLine(currentY);
    file.writeLine(currentFacing);
    file.close();
end;

function updateXZ(xz)
    if (currentFacing == northFacing) then
        currentZ = currentZ - xz;
    elseif (currentFacing == southFacing) then
        currentZ = currentZ + xz;
    elseif (currentFacing == eastFacing) then
        currentX = currentX + xz;
    elseif (currentFacing == westFacing) then
        currentX = currentX - xz;
    end;
    writeXZY();
end;

function updateY(y)
    currentY = currentY + y;
    writeXZY();
end;

function updateFacing(degrees)
    currentFacing = currentFacing + degrees;
    if (currentFacing >= 360) then
        currentFacing = currentFacing - 360;
    elseif (currentFacing <= -360) then
        currentFacing = currentFacing + 360;
    end;
    writeXZY();
end;

function readXZY()
    local file = fs.open(xzyFileName, "r"); -- "r" opens the file for reading
    if (file == nil) then
        file.close();
        writeXZY();
        return;
    end;
    currentX = file.readLine();
    currentZ = file.readLine();
    currentY = file.readLine();
    currentFacing = file.readLine();
    file.close();
end;

function turn(turnDirection, repeatCount)
    local repeatCount = repeatCount or 1;

    for i = 1,repeatCount do
        if (turnDirection == left) then
            if (turtle.turnLeft()) then updateFacing(leftFacing); log(fine, "turned: left", currentLogIndent); else log(debug, "failed to turn: left", currentLogIndent); return FAILURE;  end;
        elseif (turnDirection == right) then
            if (turtle.turnRight()) then updateFacing(rightFacing); log(fine, "turned: right", currentLogIndent); else log(debug, "failed to turn: right", currentLogIndent); return FAILURE;  end;
        end;
    end;

    return SUCCESS;
end;

function move(moveDirection)
    local moveDirection = moveDirection or forward;

    if (moveDirection == forward) then
        if (turtle.forward()) then updateXZ(forwardMoving); log(fine, "moved: forward", currentLogIndent); return SUCCESS;  else log(debug, "failed to move: forward", currentLogIndent); return FAILURE;  end;
    elseif (moveDirection == back) then
        if (turtle.back()) then updateXZ(backwardsMoving); log(fine, "moved: back", currentLogIndent); return SUCCESS;  else log(debug, "failed to move: back", currentLogIndent); return FAILURE;  end;
    elseif (moveDirection == up) then
        if (turtle.up()) then updateY(upMoving); log(fine, "moved: up", currentLogIndent); return SUCCESS;  else log(debug, "failed to move: up", currentLogIndent); return FAILURE;  end;
    elseif (moveDirection == down) then
        if (turtle.down()) then updateY(downMoving); log(fine, "moved: down", currentLogIndent); return SUCCESS;  else log(debug, "failed to move: down", currentLogIndent); return FAILURE;  end;
    end;
end;

function dig(digDirection)
    local digDirection = digDirection or forward;

    if (digDirection == forward) then
        if (turtle.dig()) then log(fine, "dug: forward", currentLogIndent); return SUCCESS; else log(debug, "failed to dig: forward", currentLogIndent); return FAILURE; end;
    elseif (digDirection == up) then
        if (turtle.digUp()) then log(fine, "dug: up", currentLogIndent); return SUCCESS;  else log(debug, "failed to dig: up", currentLogIndent); return FAILURE;  end;
    elseif (digDirection == down) then
        if (turtle.digDown()) then log(fine, "dug: down", currentLogIndent); return SUCCESS;  else log(debug, "failed to dig: down", currentLogIndent); return FAILURE;  end;
    end;
end;

function detect(detectDirection)
    local detectDirection = detectDirection or forward;

    if (detectDirection == forward) then
        if (turtle.detect()) then log(fine, "detected: item exists forward", currentLogIndent); return SUCCESS; else log(debug, "detected: no item exists forward", currentLogIndent); return FAILURE; end;
    elseif (detectDirection == up) then
        if (turtle.detectUp()) then log(fine, "detected: item exists up", currentLogIndent); return SUCCESS;  else log(debug, "detected: no item exists up", currentLogIndent); return FAILURE;  end;
    elseif (detectDirection == down) then
        if (turtle.detectDown()) then log(fine, "detected  item exists down", currentLogIndent); return SUCCESS;  else log(debug, "detected: no item exists down", currentLogIndent); return FAILURE;  end;
    end;
end;

function compare(direction)
    local direction = direction or forward;

    if (direction == forward) then
        if (turtle.compare()) then log(fine, "compared: forward item same as slot ("..currentSlotNum..")", currentLogIndent); return SUCCESS; else log(debug, "compared: forward item not same as a slot ("..currentSlotNum..")", currentLogIndent); return FAILURE; end;
    elseif (direction == up) then
        if (turtle.compareUp()) then log(fine, "compared: up item same as slot ("..currentSlotNum..")", currentLogIndent); return SUCCESS;  else log(debug, "compared: up item not same as a slot ("..currentSlotNum..")", currentLogIndent); return FAILURE;  end;
    elseif (direction == down) then
        if (turtle.compareDown()) then log(fine, "compared: down item same as slot ("..currentSlotNum..")", currentLogIndent); return SUCCESS;  else log(debug, "compared: down item not same as a slot ("..currentSlotNum..")", currentLogIndent); return FAILURE;  end;
    end;
end;

function attack(attackDirection)
    local attackDirection = attackDirection or forward;

    if (attackDirection == forward) then
        if (turtle.attack()) then log(fine, "attacked: forward", currentLogIndent); return SUCCESS; else log(debug, "failed to atack: forward", currentLogIndent); return FAILURE; end;
    elseif (attackDirection == up) then
        if (turtle.attackUp()) then log(fine, "attacked: up", currentLogIndent); return SUCCESS;  else log(debug, "failed to attack: up", currentLogIndent); return FAILURE;  end;
    elseif (attackDirection == down) then
        if (turtle.attackDown()) then log(fine, "attacked: down", currentLogIndent); return SUCCESS;  else log(debug, "failed to attack: down", currentLogIndent); return FAILURE;  end;
    end;
end;

function place(placeDirection)
    local placeDirection = placeDirection or forward;

    if (placeDirection == forward) then
        if (turtle.place()) then log(fine, "placed: forward", currentLogIndent); return SUCCESS; else log(debug, "failed to place: forward", currentLogIndent); return FAILURE; end;
    elseif (placeDirection == up) then
        if (turtle.placeUp()) then log(fine, "placed: up", currentLogIndent); return SUCCESS;  else log(debug, "failed to place: up", currentLogIndent); return FAILURE;  end;
    elseif (placeDirection == down) then
        if (turtle.placeDown()) then log(fine, "placed: down", currentLogIndent); return SUCCESS;  else log(debug, "failed to place: down", currentLogIndent); return FAILURE;  end;
    end;
end;

function select(slot)
    local slot = slot or currentSlotNum;
    log (fine, "Entering select("..slot..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;

    local selectStatus = turtle.select(slot);
    if (selectStatus) then
        log(fine, "selected: "..slot, currentLogIndent);
        currentSlotNum = slot;  -- set the global slot value
    else
        log(fine, "failed to select: "..slot, currentLogIndent);
    end;
    if (currentLogLevel == debug) then
        currentLogIndent = currentLogIndent + 1;
        log(debug, "items remaining in slot "..slot..": "..tostring(turtle.getItemCount(slot)), currentLogIndent);
        currentLogIndent = currentLogIndent - 1;
    end;

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting select()", currentLogIndent);
    return selectStatus;
end;

function selectItem(slot, isOverflow)
    local slot = slot or currentSlotNum;
    local isOverflow = isOverflow or false;
    log (fine, "Entering selectItem("..slot..","..tostring(isOverflow)..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;

    local isSuccess = select(slot);
    if (isOverflow) then
        if (isSuccess) then
            if (turtle.getItemCount(slot) > 1) then
                currentLogIndent = currentLogIndent - 1;
                log (fine, "Exiting selectItem()", currentLogIndent);
                return isSuccess;
            else
                for i = 1,16 do
                    if (i ~= slot and turtle.compareTo(i) and turtle.getItemCount(i) > 1 and select(i)) then
                        if (turtle.transferTo(slot, turtle.getItemCount(i) - 1) and select(slot)) then
                            log(debug, "Ran down to 1 resource in slot "..slot..". Using items from slot "..i.." to compensate.", currentLogIndent);
                            currentLogIndent = currentLogIndent - 1;
                            log (fine, "Exiting selectItem()", currentLogIndent);
                            return isSuccess;
                        end;
                    end;
                end;
                log (fine, "Overflow requested, but no remaining items exist in inventory. Using last item from slot ("..slot..").");
                currentLogIndent = currentLogIndent - 1;
                log (fine, "Exiting selectItem()", currentLogIndent);
                return isSuccess;
            end;
        else
            log(error, "    Critical Error: No items found in slot ("..slot..") with which to compare against in order to perform overflow selection. Stopping operation.");
            currentLogIndent = currentLogIndent - 1;
            log (fine, "Exiting selectItem()", currentLogIndent);
            shell.exit();
        end;
    else
        currentLogIndent = currentLogIndent - 1;
        log (fine, "Exiting selectItem()", currentLogIndent);
        return isSuccess;
    end;

end

-- If overflow is TRUE, then it will take the same item from another slot if the current slot doesn't have more than one.  It will then use the one if all other slots are down to one.
-- If compare is TRUE, then it will perform a replace by digging and place if the item isn't already there
-- If detect is TRUE, then it will return success if ANYTHING is detected to already be in the target location
-- If anchorProtection is TRUE, then it will move forward until it finds a block it can attach to and build an anchor back to the target location. CAUTION, this has the potential to empty your inventory.
function placeItem(placeDirection, slot, isOverflow, isCompare, isDetect, isAnchorProtection)
    local placeDirection = placeDirection or forward;
    local slot = slot or currentSlotNum;
    local isOverflow = isOverflow or false;
    local isDetect = isDetect or false;
    local isCompare = isCompare or false;
    local isAnchorProtection = isAnchorProtection or false;
    log (fine, "Entering placeItem("..placeDirection..", "..slot..", "..tostring(isOverflow)..", "..tostring(isCompare)..", "..tostring(isDetect)..", "..tostring(isAnchorProtection)..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;

    if (isDetect and detect(placeDirection)) then
        currentLogIndent = currentLogIndent - 1;
        log (fine, "Exiting placeItem()", currentLogIndent);
        return SUCCESS;
    end;

    if (not selectItem(slot, isOverflow)) then
        currentLogIndent = currentLogIndent - 1;
        log (fine, "Exiting placeItem()", currentLogIndent);
        return notEnoughInventory;
    end;

    if (isCompare) then
        if (compare(placeDirection)) then
            currentLogIndent = currentLogIndent - 1;
            log (fine, "Exiting placeItem()", currentLogIndent);
            return SUCCESS;
        else
            while (detect(placeDirection)) do
                dig(placeDirection);
            end;
        end;
    end;

    if (place(placeDirection)) then
        currentLogIndent = currentLogIndent - 1;
        log (fine, "Exiting placeItem()", currentLogIndent);
        return SUCCESS;
    elseif (isAnchorProtection) then
        log(fine, "Moving forward in an attempt to find an anchor block.", currentLogIndent);
        move(direction);
        local placeStatus = placeItem(placeDirection, slot, isOverflow, false, false, true);
        log(fine, "Moving backward after finding an anchor block.", currentLogIndent);
        move(getOppositeDirection(placeDirection));
        currentLogIndent = currentLogIndent - 1;
        log (fine, "Exiting placeItem()", currentLogIndent);
        return placeStatus;
    else
        log(fine, "Failed: A block is already present at location ("..placeDirection..").", currentLogIndent);
        currentLogIndent = currentLogIndent - 1;
        log (fine, "Exiting placeItem()", currentLogIndent);
        return blockAlreadyPresent;
    end;
end;

function moveWithDig(direction, steps, attempts)
    local direction = direction or forward;
    local steps = steps or 1
    local attempts = attempts or 10
    log (fine, "Entering moveWithDig("..direction..","..steps..","..attempts..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;

    for i = 1,steps do
        local tries = 1;
        while (not move(direction) and ((attempts == 0) or (tries <= attempts))) do
            dig(direction);
            -- THIS CONSTRUCTION IS USED SO TRIES WON'T OVERFLOW WHEN ATTEMPTS==0
            tries = math.min(tries + 1, attempts + 1)
            sleep(0)
        end;
    end;
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting moveWithDig()", currentLogIndent);
end;

function distanceBetweenTwoPoints(x1, z1, y1, x2, z2, y2)
    local xDistance = x2 - x1;  --horizontal difference
    local zDistance = z2 - z1;  --vertical difference
    local yDistance = y2 - y1;  --outward difference
    local dist = math.sqrt( (xDistance*xDistance) + (zDistance*zDistance) + (yDistance*yDistance) );    -- distance using Pythagoras theorem
    return dist;
end;

function getOppositeDirection(currentDirection)
    local currentDirection = currentDirection;
    if (currentDirection == up) then return down; end;
    if (currentDirection == down) then return up; end;
    if (currentDirection == left) then return right; end;
    if (currentDirection == right) then return left; end;
    if (currentDirection == forward) then return back; end;
    if (currentDirection == back) then return forward; end;
end;

function placeLight(lightSlot, direction)
    local direction = direction or up;
    log (fine, "Entering placeLight("..lightSlot..","..direction..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;
    if ((distanceBetweenTwoPoints(currentX, currentZ, currentY, lastLightX, lastLightZ, lastLightY) >= lightThreshold) and (placeItem(up, lightSlot, OVERFLOW, NO_COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION))) then
        lastLightX = currentX;
        lastLightZ = currentZ;
        lastLightY = currentY;
        log (fine, "Placed light", currentLogIndent);
    end;
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting placeLight()", currentLogIndent);
end;

function refuel(fuelSlot, amount, threshold)
    local fuelSlot = fuelSlot or FUEL_SLOT;
    local amount = amount or 1;
    local threshold = threshold or 5;
    if turtle.getFuelLevel() <= threshold then
        select(fuelSlot);
        turtle.refuel(amount);
    end;
end;

readXZY();