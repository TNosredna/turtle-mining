-- Slot Assignments
wallFiller1Slot = 1;     -- digStation (64)
wallFiller2Slot = 2;     -- digStation (64)
wallFiller3Slot = 3;     -- digStation (32)
wallFiller4Slot = 4;     -- digShaft (64)
floorFillerSlot = 5;     -- digStation (49)
roofFillerSlot = 6;      -- digStation (49)
stonePipe1Slot = 7;       -- prepareShaft (64)
stonePipe2Slot = 8;       -- prepareStation (2-8)
redWireSlot = 9;         -- prepareShaft (64)
smallChestSlot = 10;     -- prepareStation (4-16) / prepareShaft (2)
redstoneEngineSlot = 11; -- prepareStation (1-4) / prepareShaft (1)
woodenPipeSlot = 12;     -- prepareStation (1-4) / prepareShaft (1)
redstoneTorchSlot = 13;  -- prepareStation (1-4) / prepareShaft (1)
torchSlot = 14;          -- prepareStation (10) / prepareShaft (11)
ladderSlot = 15;         -- digShaft (64)
fuelSlot = 16;           -- digShaft

up = "up";
down = "down";
forward = "forward";
right = "right";
left = "left";
back = "back";

error = 0;
coarse = 1;
fine = 2;
debug = 3;
currentLogLevel = debug;

currentSlotNum = 1;

success = true;
failure = false;

blockPlaced = 0;
blockAlreadyPresent = 1;
notEnoughInventory = 2;
noAnchorBlocks = 3;

currentLogIndent = 0;
darkness = 0;

os.loadAPI("turtleUtils");

-- Wall Filler (64) -> Slot 4
-- Stone Pipe (64) -> Slot 7
-- Red Wire (64) -> Slot 9
-- Small Chest (2) -> Slot 10
-- Redstone Engine (1) -> Slot 11
-- Wooden Pipe (1) -> Slot 12
-- Redstone Torch (1) -> Slot 13
-- Torch (11) -> Slot 14
-- Ladder (64) -> Slot 15
--
--    Level 63      Level 62-13
--  |------|---|    |----|-----|
--  |   C  |   |    |    |     |
--  |------|---|    |----|-----|
--  | Tu/W | E |    |  S | R/T |
--  |------|---|    |----|-----|
--  |      |   |    |    |  L  |
--  |------|---|    |----|-----|
--  C  = Chest
--  W  = Wood Pipe
--  E  = Redstone Engine
--  Tu = Turtle Starting Position

--  S  = Stone Pipe
--  Tu = Turtle Shaft
--  T  = Torches
--  L  = Ladder
--  R  = Red Wire

local args={...};
local depth = args[1];
local logFileName = os.computerID().."-digShaft"..".log";

-- start while turtle facing East to place Engine
local function prepareTopOfShaft()
    turtleUtils.log (fine, "Entering prepareTopOfShaft()", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;
    turtleUtils.place(forward, redstoneEngineSlot);
    turtleUtils.turn(left);
    turtleUtils.place(forward, smallChestSlot);
    turtleUtils.moveWithDig(down);
    turtleUtils.place(up, woodenPipeSlot);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting prepareTopOfShaft()", currentLogIndent);
end;

local function digShaftLayer()
    turtleUtils.log (fine, "Entering digShaftLayer()", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(left);

    turtleUtils.moveWithDig(forward)
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(right, 2);
    turtleUtils.moveWithDig(forward)
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(right);
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(right, 2);
    turtleUtils.replace(forward, wallFiller4Slot, false);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting digShaftLayer()", currentLogIndent);
end;

local function prepareShaftLayer()
    turtleUtils.log (fine, "Entering prepareShaftLayer()", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;
    turtleUtils.turn(right);
    turtleUtils.move(back);
    turtleUtils.place(forward, ladderSlot);
    turtleUtils.turn(left);
    turtleUtils.move(back);
    turtleUtils.place(forward, redWireSlot);
    if (darkness >= 6) and (place(forward, torchSlot) == blockPlaced) then
        darkness = 0;
    end
    turtleUtils.turn(left);
    turtleUtils.moveWithDig(down);
    turtleUtils.place(up, stonePipe1Slot);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting prepareShaftLayer()", currentLogIndent);
end;

local function prepareBottomOfShaft()
    turtleUtils.log (fine, "Entering prepareBottomOfShaft()", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;
    for i=1,3 do
        turtleUtils.replace(forward, wallFiller4Slot, false);
        turtleUtils.turn(left);
        turtleUtils.replace(forward, wallFiller4Slot, false);
        turtleUtils.turn(left);

        turtleUtils.moveWithDig(forward);
        turtleUtils.turn(right);
    end;
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller4Slot, false);
    turtleUtils.turn(left);
    turtleUtils.turn(left);
    turtleUtils.place(forward, ladderSlot);
    turtleUtils.turn(left);
    turtleUtils.move(back);
    turtleUtils.place(forward, redstoneTorchSlot);
    turtleUtils.turn(left);
    turtleUtils.move(back);
    turtleUtils.place(forward, smallChestSlot);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting prepareBottomOfShaft()", currentLogIndent);
end;

local function digMineShaft(depth)
    turtleUtils.log (fine, "Entering digMineShaft()", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;
    local depth = depth;
    prepareTopOfShaft();

    for i = 1,(depth-1) do
        digShaftLayer();
        prepareShaftLayer();
        turtleUtils.refuel()
    end;

    prepareBottomOfShaft();
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting digMineShaft()", currentLogIndent);
end;

if (depth == nil or depth=="") then
    fs.delete(logFileName);
    print ("How many blocks down should the station roof be located? (depth - 13 is normal)");
    depth = io.read();
    depth = tonumber(depth);
end;

digMineShaft(depth);