-- Must allow for 1 available block above ceiling and 1 available block below floor

-- To avoid dealing with namespaces and imported scripts not
-- being able to access local variables, I've decided to inject
-- the source code when it's loaded on the filesystem.
--INJECT/turtleUtils


-- START OF LOCAL SCRIPT
-- Slot Assignments
local WALL_FILLER_SLOT = 1;     -- digStation (64)
local FLOOR_FILLER_SLOT = 2;     -- digStation (49)
local ROOF_FILLER_SLOT = 3;      -- digStation (49)

local args={...};
local radius = args[1] or nil;
local height = args[2] or nil;

local function floorAndCeilingColumn(currentUpDownDirection, numberBlocks)
    local currentUpDownDirection = currentUpDownDirection;
    local numberBlocks = numberBlocks or 5;
    log(fine, "Entering floorAndCeilingColumn("..currentUpDownDirection..","..numberBlocks..")");
    currentLogIndent = currentLogIndent + 1;
    local initialFillSlot;
    local endingFillSlot;

    if currentUpDownDirection == up then
        initialFillSlot = FLOOR_FILLER_SLOT;
        endingFillSlot = ROOF_FILLER_SLOT;
    else
        initialFillSlot = ROOF_FILLER_SLOT;
        endingFillSlot = FLOOR_FILLER_SLOT;
    end

    replace(getOppositeDirection(currentUpDownDirection), initialFillSlot);
    moveWithDig(currentUpDownDirection, numberBlocks-4);
    replace(currentUpDownDirection, endingFillSlot);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting floorAndCeilingColumn()");
    return currentUpDownDirection;
end

local function floorAndCeilingRow(currentUpDownDirection, numberColumns, height)
    local currentUpDownDirection = currentUpDownDirection;
    local numberColumns = numberColumns or 9;
    local height = height or 5;
    log (fine, "Entering floorAndCeilingRow("..currentUpDownDirection..","..numberColumns..","..height..")");
    currentLogIndent = currentLogIndent + 1;

    for i = 1,numberColumns do
        currentUpDownDirection = floorAndCeilingColumn(getOppositeDirection(currentUpDownDirection), height);
        if (i < numberColumns) then
            moveWithDig(forward, 1)
        end
    end
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting floorAndCeilingRow()");
    return currentUpDownDirection;
end

local function buildFloorAndCeiling(currentLeftRightDirection, currentUpDownDirection, numberRows, height)
    local currentUpDownDirection = currentUpDownDirection;
    local currentLeftRightDirection = currentLeftRightDirection;
    local numberRows = numberRows or 9;
    local height = height or 5;
    log (fine, "Entering buildFloorAndCeiling("..currentUpDownDirection..","..currentLeftRightDirection..","..numberRows..","..height..")");
    currentLogIndent = currentLogIndent + 1;
    local numberColumns = numberRows;

    for i = 1,numberRows do
        currentUpDownDirection = floorAndCeilingRow(currentUpDownDirection, numberColumns, height);
        if (i < numberRows) then
            currentLeftRightDirection = getOppositeDirection(currentLeftRightDirection);
            transitionOverAnd180Degrees(currentLeftRightDirection);
        end
    end
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting buildFloorAndCeiling()");
end

local function transitionOverAnd180Degrees(turnDirection, steps)
    local steps = steps or 1;
    log (fine, "Entering transitionOverAnd180Degrees("..turnDirection..","..steps..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;

    turn(turnDirection);
    moveWithDig(forward, steps);
    turn(turnDirection);
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting transitionOverAnd180Degrees()", currentLogIndent);
end

local function moveToStartingPositionForCeilingFloor(turnDirection)
    local turnDirection = turnDirection;
    log (fine, "Entering moveToStartingPositionForCeilingFloor("..turnDirection..")");
    currentLogIndent = currentLogIndent + 1;
    transitionOverAnd180Degrees(turnDirection);
    moveWithDig(forward);
    moveWithDig(up, 2);
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting moveToStartingPositionForCeilingFloor()");
end;

local function wallColumn(currentUpDownDirection, height)
    local height = height or 5;
    height = height - 2;
    local currentUpDownDirection = currentUpDownDirection;
    log (fine, "Entering wallColumn("..currentUpDownDirection..","..height..")");
    currentLogIndent = currentLogIndent + 1;
    local initialFillSlot;
    local middleFillSlot = WALL_FILLER_SLOT;
    local endingFillSlot;

    if currentUpDownDirection == up then
        initialFillSlot = FLOOR_FILLER_SLOT;
        endingFillSlot = ROOF_FILLER_SLOT;
    end
    if currentUpDownDirection == down then
        initialFillSlot = ROOF_FILLER_SLOT;
        endingFillSlot = FLOOR_FILLER_SLOT;
    end

    moveWithDig(currentUpDownDirection, 2);
    replace(getOppositeDirection(currentUpDownDirection), initialFillSlot, false);
    for i = 1,height do
        moveWithDig(currentUpDownDirection, 1);
        replace(getOppositeDirection(currentUpDownDirection), middleFillSlot);
    end
    moveWithDig(currentUpDownDirection, 1);
    replace(getOppositeDirection(currentUpDownDirection), endingFillSlot);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting wallColumn()");
    return currentUpDownDirection;
end

local function buildWalls(startingUpDownDirection, numberColumns, height)
    local currentUpDownDirection = getOppositeDirection(startingUpDownDirection);
    local numberColumns = numberColumns - 1;     -- difficult to communicate this number. misleading -> 10 leaves 9 inner spaces
    log (fine, "Entering buildWalls("..currentUpDownDirection..","..numberColumns..","..height..")");
    currentLogIndent = currentLogIndent + 1;
    local numberWalls = 4;

    for x=1,numberWalls do
        for i=1,numberColumns do
            currentUpDownDirection = wallColumn(getOppositeDirection(currentUpDownDirection), height);
            if (i < numberColumns) then
                moveWithDig(forward);
            end;
        end;
        if (x < numberWalls) then
            turn(right);
            moveWithDig(forward);
        end;
    end;
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting buildWalls()");
    return currentUpDownDirection;
end;

local function moveToStartingPositionForWalls(radius, height)
    log (fine, "Entering moveToStartingPositionForWalls("..radius..","..height..")");
    currentLogIndent = currentLogIndent + 1;
    local currentUpDownDirection = up;
    -- turtle MUST start at (height + 8) or higher for
    -- this moves turtle from starting position to corner of room where the room anchor column will be built
    moveWithDig(down, height + 1);
    moveWithDig(forward, radius + 1);
    turn(right);
    moveWithDig(forward, radius);
    turn(right);
    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting moveToStartingPositionForWalls()");
    return currentUpDownDirection;
end

if ((radius == nil or radius==0) or (height == nil or height==0)) then
    fs.delete(logFileName);
    print ("What is the desired radius of the station? (5 is normal)");
    radius = io.read();
    radius = tonumber(radius);

    print ("What is the desired height, including floor and ceiling layers, of the station? (5 is normal)");
    height = io.read();
    height = tonumber(height);
end;

local diameter = radius * 2;
local currentUpDownDirection = moveToStartingPositionForWalls(radius, height);
currentUpDownDirection = buildWalls(currentUpDownDirection, (diameter +1), height);
moveToStartingPositionForCeilingFloor(right);
buildFloorAndCeiling(left, down, (diameter - 1), height);
