-- Must allow for 1 available block above ceiling and 1 available block below floor

-- To avoid dealing with namespaces and imported scripts not
-- being able to access local variables, I've decided to inject
-- the source code when it's loaded on the filesystem.
--INJECT/turtleUtils


-- START OF LOCAL SCRIPT
local args={...};
local radius = args[1] or nil;
local height = args[2] or nil;
currentLogIndent = args[3] or 0;

local function floorAndCeilingColumn(currentUpDownDirection, height)
    local currentUpDownDirection = currentUpDownDirection;
    local height = height or 5;
    log(fine, "Entering floorAndCeilingColumn(currentUpDownDirection="..currentUpDownDirection..", height="..height..")");
    currentLogIndent = currentLogIndent + 1;

    local initialFillSlot;
    local endingFillSlot;

    if (currentUpDownDirection == up) then
        initialFillSlot = STATION_FLOOR_FILLER_SLOT;
        endingFillSlot = STATION_ROOF_FILLER_SLOT;
    else
        initialFillSlot = STATION_ROOF_FILLER_SLOT;
        endingFillSlot = STATION_FLOOR_FILLER_SLOT;
    end;

    placeItem(getOppositeDirection(currentUpDownDirection), initialFillSlot, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    moveWithDig(currentUpDownDirection, height - 3);
    placeItem(currentUpDownDirection, endingFillSlot, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting floorAndCeilingColumn()");
    return currentUpDownDirection;
end;

local function floorAndCeilingRow(currentUpDownDirection, length, height)
    local currentUpDownDirection = currentUpDownDirection;
    local length = length or 9;
    local height = height or 5;
    log (fine, "Entering floorAndCeilingRow(currentUpDownDirection="..currentUpDownDirection..", length="..length..", height="..height..")");
    currentLogIndent = currentLogIndent + 1;

    for i = 1,length do
        if (i > 1) then
            moveWithDig(forward, 1);
        end;
        currentUpDownDirection = floorAndCeilingColumn(getOppositeDirection(currentUpDownDirection), height);
    end;

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting floorAndCeilingRow()");
    return currentUpDownDirection;
end;

local function transitionOverAnd180Degrees(turnDirection, steps)
    local steps = steps or 1;
    log (fine, "Entering transitionOverAnd180Degrees(turnDirection="..turnDirection..", steps="..steps..")", currentLogIndent);
    currentLogIndent = currentLogIndent + 1;

    turn(turnDirection);
    moveWithDig(forward, steps);
    turn(turnDirection);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting transitionOverAnd180Degrees()", currentLogIndent);
end;

local function buildFloorAndCeiling(currentLeftRightDirection, currentUpDownDirection, diameterWithoutWalls, height)
    local currentUpDownDirection = currentUpDownDirection;
    local currentLeftRightDirection = currentLeftRightDirection;
    local diameterWithoutWalls = diameterWithoutWalls or 9;
    local height = height or 5;
    log (fine, "Entering buildFloorAndCeiling(currentUpDownDirection="..currentUpDownDirection..", currentLeftRightDirection="..currentLeftRightDirection..", diameterWithoutWalls="..diameterWithoutWalls..", height="..height..")");
    currentLogIndent = currentLogIndent + 1;

    for i = 1,diameterWithoutWalls do
        currentUpDownDirection = floorAndCeilingRow(currentUpDownDirection, diameterWithoutWalls, height);
        if (i < diameterWithoutWalls) then
            transitionOverAnd180Degrees(currentLeftRightDirection);
            currentLeftRightDirection = getOppositeDirection(currentLeftRightDirection);
        end;
    end;

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting buildFloorAndCeiling()");
end;

local function moveToStartingPositionForCeilingFloor(turnDirection)
    local turnDirection = turnDirection;
    log (fine, "Entering moveToStartingPositionForCeilingFloor(turnDirection="..turnDirection..")");
    currentLogIndent = currentLogIndent + 1;

    transitionOverAnd180Degrees(turnDirection);
    moveWithDig(up, 2);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting moveToStartingPositionForCeilingFloor()");
end;

local function wallColumn(currentUpDownDirection, height)
    local height = height or 5;
    height = height - 2;
    local currentUpDownDirection = currentUpDownDirection;
    log (fine, "Entering wallColumn(currentUpDownDirection="..currentUpDownDirection..", height="..height..")");
    currentLogIndent = currentLogIndent + 1;

    local initialFillSlot;
    local middleFillSlot = STATION_WALL_FILLER_SLOT;
    local endingFillSlot;

    if currentUpDownDirection == up then
        initialFillSlot = STATION_FLOOR_FILLER_SLOT;
        endingFillSlot = STATION_ROOF_FILLER_SLOT;
    end;
    if currentUpDownDirection == down then
        initialFillSlot = STATION_ROOF_FILLER_SLOT;
        endingFillSlot = STATION_FLOOR_FILLER_SLOT;
    end;

    moveWithDig(currentUpDownDirection, 2);
    placeItem(getOppositeDirection(currentUpDownDirection), initialFillSlot, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    for i = 1,height do
        moveWithDig(currentUpDownDirection, 1);
        placeItem(getOppositeDirection(currentUpDownDirection), middleFillSlot, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);
    end
    moveWithDig(currentUpDownDirection, 1);
    placeItem(getOppositeDirection(currentUpDownDirection), endingFillSlot, OVERFLOW, COMPARE, NO_DETECT, NO_ANCHOR_PROTECTION);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting wallColumn()");
    return currentUpDownDirection;
end

local function buildWalls(startingUpDownDirection, diameterWithWalls, height)
    local height = height;
    local currentUpDownDirection = getOppositeDirection(startingUpDownDirection);
    local diameterWithWalls = diameterWithWalls - 1;     -- difficult to communicate this number. misleading -> 10 leaves 9 inner spaces
    log (fine, "Entering buildWalls(currentUpDownDirection="..currentUpDownDirection..", diameterWithWalls="..diameterWithWalls..", height="..height..")");
    currentLogIndent = currentLogIndent + 1;

    local numberWalls = 4;

    for x=1,numberWalls do
        for i=1,diameterWithWalls do
            currentUpDownDirection = wallColumn(getOppositeDirection(currentUpDownDirection), height);
            if (i < diameterWithWalls) then
                moveWithDig(forward);
            end;
        end;
        if (x < numberWalls) then
            moveWithDig(forward);
            turn(right);
        end;
    end;

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting buildWalls()");
end;

local function moveToStartingPositionForWalls(currentUpDownDirection, radius, height)
    log (fine, "Entering moveToStartingPositionForWalls(currentUpDownDirection="..currentUpDownDirection..", radius="..radius..", height="..height..")");
    currentLogIndent = currentLogIndent + 1;

    local currentUpDownDirection = currentUpDownDirection or up;
    -- turtle MUST start at (height + 8) or higher for
    -- this moves turtle from starting position to corner of room where the room anchor column will be built
    moveWithDig(down, height + 1);
    moveWithDig(forward, radius);
    turn(right);
    moveWithDig(forward, radius - 1);
    turn(right);

    currentLogIndent = currentLogIndent - 1;
    log (fine, "Exiting moveToStartingPositionForWalls()");
    return currentUpDownDirection;
end

if ((radius == nil) or (height == nil)) then
    fs.delete(logFileName);
    print ("What is the desired radius of the station? (3 is normal)");
    radius = io.read();
    radius = tonumber(radius);

    print ("What is the desired height, including floor and ceiling layers, of the station? (4 is normal)");
    height = io.read();
    height = tonumber(height);
end;

local diameterWithWalls = (radius * 2) + 1;
local diameterWithoutWalls = (radius * 2) - 1;
local startingUpDownDirection = up;
local startingLeftRightDirection = right;

log (fine, "Entering DIG_STATION(startingUpDownDirection="..startingUpDownDirection..", startingLeftRightDirection="..startingLeftRightDirection..", radius="..radius..", height="..height..", diameterWithWalls="..diameterWithWalls..", diameterWithoutWalls="..diameterWithoutWalls..")");
currentLogIndent = currentLogIndent + 1;

currentUpDownDirection = moveToStartingPositionForWalls(startingUpDownDirection, radius, height);
buildWalls(currentUpDownDirection, diameterWithWalls, height);
moveToStartingPositionForCeilingFloor(startingLeftRightDirection);
buildFloorAndCeiling(left, down, diameterWithoutWalls, height);

currentLogIndent = currentLogIndent - 1;
log (fine, "Exiting DIG_STATION()");