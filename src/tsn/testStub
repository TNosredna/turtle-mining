os.loadAPI("turtleUtils");

-- Wall Filler (64) -> Slot 4
-- Stone Pipe (64) -> Slot 7
-- Red Wire (64) -> Slot 9
-- Small Chest (2) -> Slot 10
-- Redstone Engine (1) -> Slot 11
-- Wooden Pipe (1) -> Slot 12
-- Redstone Torch (1) -> Slot 13
-- Torch (11) -> Slot 14
-- Ladder (64) -> Slot 15
--
--    Level 63      Level 62-13
--  |------|---|    |----|-----|
--  |   C  |   |    |    |     |
--  |------|---|    |----|-----|
--  | Tu/W | E |    |  S | R/T |
--  |------|---|    |----|-----|
--  |      |   |    |    |  L  |
--  |------|---|    |----|-----|
--  C  = Chest
--  W  = Wood Pipe
--  E  = Redstone Engine
--  Tu = Turtle Starting Position

--  S  = Stone Pipe
--  Tu = Turtle Shaft
--  T  = Torches
--  L  = Ladder
--  R  = Red Wire

local args={...};
local depth = args[1];

-- start while turtle facing East to place Engine
local function prepareTopOfShaft()
    turtleUtils.log (fine, "Entering prepareTopOfShaft()");
    currentLogIndent = currentLogIndent + 1;
    turtleUtils.selectWithOverflow(redstoneEngineSlot);
    turtleUtils.place(forward);
    turtleUtils.turn(left);
    turtleUtils.selectWithOverflow(smallChestSlot);
    turtleUtils.place(forward);
    turtleUtils.moveWithDig(down);
    turtleUtils.selectWithOverflow(woodenPipeSlot);
    turtleUtils.place(up);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting prepareTopOfShaft()");
end;

local function digShaftLayer()
    turtleUtils.log (fine, "Entering digShaftLayer()");
    currentLogIndent = currentLogIndent + 1;
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(left);

    turtleUtils.moveWithDig(forward)
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(right, 2);
    turtleUtils.moveWithDig(forward)
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(right);
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(right, 2);
    turtleUtils.replace(forward, wallFiller1Slot, false);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting digShaftLayer()");
end;

local function prepareShaftLayer()
    turtleUtils.log (fine, "Entering prepareShaftLayer()");
    currentLogIndent = currentLogIndent + 1;
    turtleUtils.turn(right);
    turtleUtils.move(back);
    turtleUtils.place(forward, ladderSlot);
    turtleUtils.turn(left);
    turtleUtils.move(back);
    turtleUtils.place(forward, redWireSlot);
    if (darkness >= 6) and (place(forward, torchSlot) == blockPlaced) then
        darkness = 0;
    end
    turtleUtils.turn(left);
    turtleUtils.moveWithDig(down);
    turtleUtils.place(up, stonePipeSlot);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting prepareShaftLayer()");
end;

local function prepareBottomOfShaft()
    turtleUtils.log (fine, "Entering prepareBottomOfShaft()");
    currentLogIndent = currentLogIndent + 1;
    for i=1,3 do
        turtleUtils.replace(forward, wallFiller1Slot, false);
        turtleUtils.turn(left);
        turtleUtils.replace(forward, wallFiller1Slot, false);
        turtleUtils.turn(left);

        turtleUtils.moveWithDig(forward);
        turtleUtils.turn(right);
    end;
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(left);
    turtleUtils.replace(forward, wallFiller1Slot, false);
    turtleUtils.turn(left);
    turtleUtils.turn(left);
    turtleUtils.place(forward, ladderSlot, false);
    turtleUtils.turn(left);
    turtleUtils.move(back);
    turtleUtils.place(forward, redstoneTorchSlot, false);
    turtleUtils.turn(left);
    turtleUtils.move(back);
    turtleUtils.place(forward, smallChestSlot, false);
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting prepareBottomOfShaft()");
end;

local function digMineShaft(depth)
    turtleUtils.log (fine, "Entering digMineShaft()");
    currentLogIndent = currentLogIndent + 1;
    local depth = depth;
    prepareTopOfShaft();

    for i = 1,(depth-1) do
        digShaftLayer();
        prepareShaftLayer();
        turtleUtils.refuel()
    end;

    prepareBottomOfShaft();
    currentLogIndent = currentLogIndent - 1;
    turtleUtils.log (fine, "Exiting digMineShaft()");
end;

if (depth == nil or depth=="") then
    fs.delete(logFileName);
    print ("How many blocks down should the station roof be located? (depth - 13 is normal)");
    depth = io.read();
    depth = tonumber(depth);
end;

digMineShaft(depth);