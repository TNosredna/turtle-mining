scanDepth = 0


-- compares block above with first 4 inv slots and returns true if it isnt dirt, cobble, stone, gravel
function isValueUp()
 pReturn = true
 for itemIndex = 1, 4 do
  turtle.select(itemIndex)
  if turtle.compareUp() then pReturn = false end
 end
 turtle.select(1)
return pReturn
end
 -- same    
function isValueDown()
 pReturn = true
 for itemIndex = 1, 4 do
  turtle.select(itemIndex)
  if turtle.compareDown() then pReturn = false end
 end
 turtle.select(1)
return pReturn
end      

-- same
function isValue()
 pReturn = true
 for itemIndex = 1, 4 do
  turtle.select(itemIndex)
  if turtle.compare() then pReturn = false end
 end
 turtle.select(1)
return pReturn
end   

-- needed for dunno
function compareWith(itemIndex)
 turtle.select(itemIndex)
 local pReturn = turtle.compare()
 turtle.select(1)
 return pReturn
end

-- classic but with lava/water fail save
function tryDig()
	local k= 1
	while turtle.dig() do
		sleep(0.5)
		if not turtle.detect() then
			return true
		end
	k = k +1
	if k == 20 then return false end
end
	return not turtle.detect()
end

--classic 2
function tryDigUp()
	local k = 1
	while turtle.digUp() do
		sleep(0.5)
		if not turtle.detectUp() then
			return true
		end
		k = k +1
	if k == 20 then return false end
	end
	return not turtle.detectUp()
end

-- scans block above turtle if it isnt stone, dirt cobble gravel, digs it, saves that "movement" to array and scans all new surrounding blocks
function up()
 if turtle.detectUp() then
    if isValueUp() then
       if tryDigUp() then
          if tMove.up() then
             tPathFinder.add("up","scan")
             scanDepth = scanDepth +1
             scan("up")
          end
          if tMove.down() then
             tPathFinder.delete("scan")
             turtle.placeUp()
             scanDepth = scanDepth -1
         --    if scanDepth == 0 then tPathFinder.flash("scan") end
          end
       end
    end
 end
end 

-- same
function down()
 if turtle.detectDown() then
    if isValueDown() then
       if turtle.digDown() then
          if tMove.down() then
             tPathFinder.add("down","scan")
             scanDepth = scanDepth +1
             scan("down")
          end
          if tMove.up() then
             turtle.placeDown()
             scanDepth = scanDepth -1
             tPathFinder.delete("scan")
         --    if scanDepth == 0 then tPathFinder.flash("scan") end
          end
       end
    end
 end
end
 
-- same
function left()
 tMove.turnLeft()
 tPathFinder.add("turnLeft","scan")
 front()
 tMove.turnRight()
 tPathFinder.delete("scan")
end

function right()
 tMove.turnRight()
 tPathFinder.add("turnRight","scan")
 front()
 tMove.turnLeft()
 tPathFinder.delete("scan")
end

-- same
function back()
 tMove.turnLeft()
 tMove.turnLeft()
 tPathFinder.add("turnLeft","scan")
 tPathFinder.add("turnLeft","scan")
 front("back")
 tMove.turnRight()
 tMove.turnRight()
 tPathFinder.delete("scan")
 tPathFinder.delete("scan")
end

-- same 
function front(pArg)
     if turtle.detect() then
       if isValue() then
          if tryDig() then
             if tMove.forward() then
                tPathFinder.add("forward","scan")
                scanDepth = scanDepth + 1     
                if pArg == "back" then
                   scan("back") 
                else scan("forward")
                end
             end
             if tMove.back() then
                tPathFinder.delete("scan")
                turtle.place()
                scanDepth = scanDepth -1
           --     if scanDepth == 0 then tPathFinder.flash("scan") end
             end
         end
       end   
    end
end

   

-- scans all surrounding blocks, checks if 1 inv slot is free and from what direction you came, no need to scan there
function scan(pArg)
   if scanDepth < 20 then
      
      if pArg ~= "forward" then
         if tInv.hasSpace then
            back()      
         else 
            tPathFinder.goWayBack()
            tInv.dropJunk()
            tPathFinder.goWayTo()     
         end
      end     
      if pArg ~= "back" then
         if tInv.hasSpace() then 
            front() 
         else 
            tPathFinder.goWayBack()
            tInv.dropJunk()
            tPathFinder.goWayTo()
         end   
      end
      if pArg ~= "down" then  
         if tInv.hasSpace() then
            up()
         else 
            tPathFinder.goWayBack()
            tInv.dropJunk()
            tPathFinder.goWayTo()
         end
      end
      if pArg ~= "up" then
         if tInv.hasSpace() then
            down()
         else 
            tPathFinder.goWayBack()
            tInv.dropJunk()
            tPathFinder.goWayTo()
         end
      end
 
      if   tInv.hasSpace then 
           left() 
      else 
            tPathFinder.goWayBack()
            tInv.dropJunk()
            tPathFinder.goWayTo()
      end
      if   tInv.hasSpace then 
           right()
      else 
            tPathFinder.goWayBack()
            tInv.dropJunk()
            tPathFinder.goWayTo()
      end

   else return false
   end
end